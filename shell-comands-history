# Cookbook para Iniciar um projeto

*** Criar o projeto no site GitHub
cd <sua pasta raiz de projetos>
git clone https://github.com/IvanBrasilico/raspa-preco.git raspapreco


# Criar estrutura python padrão

mkdir raspa-preco/raspa-preco
cd raspa-preco
mkdir tests
mkdir models
mkdir locale

# Aproveitar a configuração de outros projetos
cd (...) # ir ao diretório mais conveniente para copiar do projeto anterior
cp ext/binput/setup.py raspa-preco/
cp ext/binput/travis.yml raspa-preco/.travis.yml
cp ext/binput/tox.ini raspa-preco/
cp ext/binput/pylintrc raspa-preco/
cp ext/binput/pytest.ini raspa-preco/
cp ext/binput/generatepot.sh raspa-preco/
cp /ext/binput/.gitignore .
ls -la
git status
git add -A
git status
git commit -m "preparo do ambiente de testes e do git"
git push

** Fazer mudanças necessárias nos arquivos setup.ini, tox.ini, generatepot.sh

# Criar ambiente virtual para não bagunçar o sistema

python -m virtualenv venv
. venv/bin/activate

Colocar as dependências em setup.py e rodar:
python setup.py develop
pip install -e .[dev]
# OU manual: pip install pytest tox codecov flake8 flake8-quotes sphinx

# Para guardar e atualizar as dependências com número de versão

pip freeze >> requirements.txt
# Para guardar comandos utilizados
history >> shell-comands-history

## Se o repositório já existir...
# Install
git clone https://github.com/IvanBrasilico/raspa-preco.git raspapreco
cd raspapreco
python -m virtualenv venv
. venv/bin/activate

pip install -r requirements.txt
# OU usando setup.py:
pip install -e .[dev] # Para instalar extras no 
# OU
pip install -e . # IMPORTANTE para setar . como PYTHONPATH

## Não esquecer de ir ao Travis e Codecov adicionar o repositório e pegar o badge para o README após ter alguns testes rodando

ln -s raspapreco/site/static raspapreco/static # Para a versão debug achar os static files

# Para servir a parte estática, colocar as seguintes linhas
# no arquivo nginx/sites-enabled e colocar o conteúdo de sites em
# /var/ww/html:

location ~ ^/api.* {
    proxy_pass http://127.0.0.1:5000;
}

# Configuração do Sphinx (documentação)
São dois arquivos, conf.py e index.rst. Olhar exemplo neste projeto.
Inicia com sphinx-quickstart
Aí é só colocar o nome dos módulos assim no arquivo .rst:
.. automodule:: raspapreco.utils.site_scraper
    :members:
# Bom guia/exemplo de Sphinx:
# http://sphinxcontrib-napoleon.readthedocs.io/en/latest/index.html
# Para gerar documentação no Linux:
make html
# Para gerar documentação no Windows:
sphinx-build -b html docs _html
# Para adicionar um tema a documentação
pip install sphinx-rtd-theme
No arquivo conf adicionar 
import sphinx_rtd_theme
...
html_theme = 'sphinx_rtd_theme'
html_theme_path = sphinx_rtd_theme.get_html_theme_path()

# Configuração do Celery
sudo apt install rabbitmq-server
# OU
sudo apt install redis-server

pip install Celery
ver arquivo celery.sh

# Configurar alembic
pip install alembic
alembic init alembic
## Configurar Banco de Dados em alembic/env.py
# no lugar de target_metadata = None criar Sessão
mysession = MySession(Base)
session = mysession.session()
engine = mysession.engine()
target_metadata = Base.metadata
# Colocar:  connectable = engine dentro de função run_migrations_online()
# A cada mudança, rodar os comandos:
alembic revision --autogenerate -m "Descrever a mudança"
alembic upgrade head

# Testes
escrever o coverage em html
python -m pytest --cov --cov-report=html sentinela